S -> int id ( ) { DECLARATION_STATEMENT STATEMENT_LIST }
DECLARATION_STATEMENT -> DECLARATION_STATEMENT DECLARATION
DECLARATION_STATEMENT -> DECLARATION
DECLARATION -> TYPE_SPECIFIER ID_LIST ;
TYPE_SPECIFIER -> int
TYPE_SPECIFIER -> float
ID_LIST -> ID_LIST , id
ID_LIST -> id
ID_LIST -> id [ DIGIT ] = { DIGIT_LIST }
DIGIT_LIST -> DIGIT_LIST , digit
DIGIT_LIST -> digit
STATEMENT_LIST -> STATEMENT_LIST STATEMENT
STATEMENT_LIST -> STATEMENT
STATEMENT -> RETURN EXPRESSION ;
STATEMENT -> ASSIGN_EXPRESSION ;
STATEMENT -> ITERATION_EXPRESSION
STATEMENT -> SELECTION_STATEMENT
STATEMENT -> { STATEMENT_LIST }
EXPRESSION -> E
E -> E + T
E -> E - T
E -> T
T -> T * F
T -> T / F
T -> F
F -> ( E )
F -> digit
F -> id
F -> id [ EXPRESSION ]
ASSIGN_EXPRESSION -> LEFT_VALUE = EXPRESSION
LEFT_VALUE -> id
LEFT_VALUE -> id [ EXPRESSION ]
ITERATION_EXPRESSION -> for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT
RELATION_EXPRESSION -> EXPRESSION RELATION_OP EXPRESSION
RELATION_OP -> <
RELATION_OP -> >
RELATION_OP -> >=
RELATION_OP -> <=
RELATION_OP -> ==
INC_EXPRESSION -> LEFT_VALUE ++
SELECTION_STATEMENT -> if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT
STATEMENT -> printf ( string ) ;
STATEMENT -> printf ( string ,M ID_LIST ) ;
STATEMENT -> scanf( string , & id ) ;
M -> @