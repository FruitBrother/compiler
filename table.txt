I0:
PROGRAM->. int id ( ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/#
PROGRAM->. int id ( ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/int
PROGRAM_LIST->. PROGRAM ,/#
PROGRAM_LIST->. PROGRAM ,/int
PROGRAM_LIST->. PROGRAM_LIST PROGRAM ,/#
PROGRAM_LIST->. PROGRAM_LIST PROGRAM ,/int
S->. PROGRAM_LIST ,/#
S'->. S ,/#

I1:
PROGRAM_LIST->PROGRAM .,/#
PROGRAM_LIST->PROGRAM .,/int

I2:
PROGRAM->. int id ( ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/#
PROGRAM->. int id ( ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/int
PROGRAM_LIST->PROGRAM_LIST . PROGRAM ,/#
PROGRAM_LIST->PROGRAM_LIST . PROGRAM ,/int
S->PROGRAM_LIST .,/#

I3:
S'->S .,/#

I4:
PROGRAM->int . id ( ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/#
PROGRAM->int . id ( ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/int

I5:
PROGRAM_LIST->PROGRAM_LIST PROGRAM .,/#
PROGRAM_LIST->PROGRAM_LIST PROGRAM .,/int

I6:
PROGRAM->int id . ( ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/#
PROGRAM->int id . ( ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/int

I7:
PROGRAM->int id ( . ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/#
PROGRAM->int id ( . ) { DECLARATION_STATEMENT STATEMENT_LIST } ,/int

I8:
PROGRAM->int id ( ) . { DECLARATION_STATEMENT STATEMENT_LIST } ,/#
PROGRAM->int id ( ) . { DECLARATION_STATEMENT STATEMENT_LIST } ,/int

I9:
DECLARATION->. TYPE_SPECIFIER ID_LIST ; ,/(/digit/for/id/if/printf/scanf(/{
DECLARATION->. TYPE_SPECIFIER ID_LIST ; ,/float/int
DECLARATION_STATEMENT->. DECLARATION ,/(/digit/for/id/if/printf/scanf(/{
DECLARATION_STATEMENT->. DECLARATION ,/float/int
DECLARATION_STATEMENT->. DECLARATION_STATEMENT DECLARATION ,/(/digit/for/id/if/printf/scanf(/{
DECLARATION_STATEMENT->. DECLARATION_STATEMENT DECLARATION ,/float/int
TYPE_SPECIFIER->. float ,/id
TYPE_SPECIFIER->. int ,/id
PROGRAM->int id ( ) { . DECLARATION_STATEMENT STATEMENT_LIST } ,/#
PROGRAM->int id ( ) { . DECLARATION_STATEMENT STATEMENT_LIST } ,/int

I10:
DECLARATION_STATEMENT->DECLARATION .,/(/digit/for/id/if/printf/scanf(/{
DECLARATION_STATEMENT->DECLARATION .,/float/int

I11:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
DECLARATION->. TYPE_SPECIFIER ID_LIST ; ,/(/digit/for/id/if/printf/scanf(/{
DECLARATION->. TYPE_SPECIFIER ID_LIST ; ,/float/int
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}
STATEMENT->. ITERATION_EXPRESSION ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ITERATION_EXPRESSION ,/}
STATEMENT->. SELECTION_STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. SELECTION_STATEMENT ,/}
STATEMENT->. ASSIGN_EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ASSIGN_EXPRESSION ; ,/}
STATEMENT->. RETURN EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. RETURN EXPRESSION ; ,/}
STATEMENT->. { STATEMENT_LIST } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. { STATEMENT_LIST } ,/}
STATEMENT->. printf ( string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ) ; ,/}
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/}
STATEMENT->. scanf( string , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. scanf( string , & id ) ; ,/}
STATEMENT_LIST->. STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->. STATEMENT ,/}
STATEMENT_LIST->. STATEMENT_LIST STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->. STATEMENT_LIST STATEMENT ,/}
TYPE_SPECIFIER->. float ,/id
TYPE_SPECIFIER->. int ,/id
DECLARATION_STATEMENT->DECLARATION_STATEMENT . DECLARATION ,/(/digit/for/id/if/printf/scanf(/{
DECLARATION_STATEMENT->DECLARATION_STATEMENT . DECLARATION ,/float/int
PROGRAM->int id ( ) { DECLARATION_STATEMENT . STATEMENT_LIST } ,/#
PROGRAM->int id ( ) { DECLARATION_STATEMENT . STATEMENT_LIST } ,/int

I12:
ID_LIST->. id ,/,
ID_LIST->. id ,/;
ID_LIST->. ID_LIST , id ,/,
ID_LIST->. ID_LIST , id ,/;
ID_LIST->. id [ digit ] ,/,
ID_LIST->. id [ digit ] ,/;
ID_LIST->. id [ digit ] = { DIGIT_LIST } ,/,
ID_LIST->. id [ digit ] = { DIGIT_LIST } ,/;
DECLARATION->TYPE_SPECIFIER . ID_LIST ; ,/(/digit/for/id/if/printf/scanf(/{
DECLARATION->TYPE_SPECIFIER . ID_LIST ; ,/float/int

I13:
TYPE_SPECIFIER->float .,/id

I14:
TYPE_SPECIFIER->int .,/id

I15:
STATEMENT->ASSIGN_EXPRESSION . ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->ASSIGN_EXPRESSION . ; ,/}

I16:
DECLARATION_STATEMENT->DECLARATION_STATEMENT DECLARATION .,/(/digit/for/id/if/printf/scanf(/{
DECLARATION_STATEMENT->DECLARATION_STATEMENT DECLARATION .,/float/int

I17:
STATEMENT->ITERATION_EXPRESSION .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->ITERATION_EXPRESSION .,/}

I18:
ASSIGN_EXPRESSION->LEFT_VALUE . = EXPRESSION ,/;

I19:
E->. T ,/+
E->. T ,/-
E->. T ,/;
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/;
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/;
EXPRESSION->. E ,/;
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/;
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/;
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/;
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/;
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/;
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/;
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/;
STATEMENT->RETURN . EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->RETURN . EXPRESSION ; ,/}

I20:
STATEMENT->SELECTION_STATEMENT .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->SELECTION_STATEMENT .,/}

I21:
STATEMENT_LIST->STATEMENT .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->STATEMENT .,/}

I22:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}
STATEMENT->. ITERATION_EXPRESSION ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ITERATION_EXPRESSION ,/}
STATEMENT->. SELECTION_STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. SELECTION_STATEMENT ,/}
STATEMENT->. ASSIGN_EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ASSIGN_EXPRESSION ; ,/}
STATEMENT->. RETURN EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. RETURN EXPRESSION ; ,/}
STATEMENT->. { STATEMENT_LIST } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. { STATEMENT_LIST } ,/}
STATEMENT->. printf ( string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ) ; ,/}
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/}
STATEMENT->. scanf( string , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. scanf( string , & id ) ; ,/}
STATEMENT_LIST->STATEMENT_LIST . STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->STATEMENT_LIST . STATEMENT ,/}
PROGRAM->int id ( ) { DECLARATION_STATEMENT STATEMENT_LIST . } ,/#
PROGRAM->int id ( ) { DECLARATION_STATEMENT STATEMENT_LIST . } ,/int

I23:
ITERATION_EXPRESSION->for . ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for . ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}

I24:
LEFT_VALUE->id .,/=
LEFT_VALUE->id . [ EXPRESSION ] ,/=

I25:
SELECTION_STATEMENT->if . ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->if . ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}

I26:
STATEMENT->printf . ( string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf . ( string ) ; ,/}
STATEMENT->printf . ( string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf . ( string ,M ID_LIST ) ; ,/}

I27:
STATEMENT->scanf( . string , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->scanf( . string , & id ) ; ,/}

I28:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}
STATEMENT->. ITERATION_EXPRESSION ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ITERATION_EXPRESSION ,/}
STATEMENT->. SELECTION_STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. SELECTION_STATEMENT ,/}
STATEMENT->. ASSIGN_EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ASSIGN_EXPRESSION ; ,/}
STATEMENT->. RETURN EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. RETURN EXPRESSION ; ,/}
STATEMENT->. { STATEMENT_LIST } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. { STATEMENT_LIST } ,/}
STATEMENT->. printf ( string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ) ; ,/}
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/}
STATEMENT->. scanf( string , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. scanf( string , & id ) ; ,/}
STATEMENT_LIST->. STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->. STATEMENT ,/}
STATEMENT_LIST->. STATEMENT_LIST STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->. STATEMENT_LIST STATEMENT ,/}
STATEMENT->{ . STATEMENT_LIST } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->{ . STATEMENT_LIST } ,/}

I29:
ID_LIST->ID_LIST . , id ,/,
ID_LIST->ID_LIST . , id ,/;
DECLARATION->TYPE_SPECIFIER ID_LIST . ; ,/(/digit/for/id/if/printf/scanf(/{
DECLARATION->TYPE_SPECIFIER ID_LIST . ; ,/float/int

I30:
ID_LIST->id .,/,
ID_LIST->id .,/;
ID_LIST->id . [ digit ] ,/,
ID_LIST->id . [ digit ] ,/;
ID_LIST->id . [ digit ] = { DIGIT_LIST } ,/,
ID_LIST->id . [ digit ] = { DIGIT_LIST } ,/;

I31:
STATEMENT->ASSIGN_EXPRESSION ; .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->ASSIGN_EXPRESSION ; .,/}

I32:
E->. T ,/+
E->. T ,/-
E->. T ,/;
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/;
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/;
EXPRESSION->. E ,/;
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/;
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/;
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/;
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/;
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/;
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/;
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/;
ASSIGN_EXPRESSION->LEFT_VALUE = . EXPRESSION ,/;

I33:
E->. T ,/)
E->. T ,/+
E->. T ,/-
E->. E + T ,/)
E->. E + T ,/+
E->. E + T ,/-
E->. E - T ,/)
E->. E - T ,/+
E->. E - T ,/-
F->. digit ,/)
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. id ,/)
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. ( E ) ,/)
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. id [ EXPRESSION ] ,/)
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
T->. F ,/)
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. T * F ,/)
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T / F ,/)
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
F->( . E ) ,/*
F->( . E ) ,/+
F->( . E ) ,/-
F->( . E ) ,//
F->( . E ) ,/;

I34:
E->E . + T ,/+
E->E . + T ,/-
E->E . + T ,/;
E->E . - T ,/+
E->E . - T ,/-
E->E . - T ,/;
EXPRESSION->E .,/;

I35:
STATEMENT->RETURN EXPRESSION . ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->RETURN EXPRESSION . ; ,/}

I36:
T->F .,/*
T->F .,/+
T->F .,/-
T->F .,//
T->F .,/;

I37:
E->T .,/+
E->T .,/-
E->T .,/;
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . * F ,/;
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
T->T . / F ,/;

I38:
F->digit .,/*
F->digit .,/+
F->digit .,/-
F->digit .,//
F->digit .,/;

I39:
F->id .,/*
F->id .,/+
F->id .,/-
F->id .,//
F->id .,/;
F->id . [ EXPRESSION ] ,/*
F->id . [ EXPRESSION ] ,/+
F->id . [ EXPRESSION ] ,/-
F->id . [ EXPRESSION ] ,//
F->id . [ EXPRESSION ] ,/;

I40:
STATEMENT_LIST->STATEMENT_LIST STATEMENT .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->STATEMENT_LIST STATEMENT .,/}

I41:
PROGRAM->int id ( ) { DECLARATION_STATEMENT STATEMENT_LIST } .,/#
PROGRAM->int id ( ) { DECLARATION_STATEMENT STATEMENT_LIST } .,/int

I42:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
ITERATION_EXPRESSION->for ( . ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( . ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}

I43:
E->. T ,/+
E->. T ,/-
E->. T ,/]
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/]
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/]
EXPRESSION->. E ,/]
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/]
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/]
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/]
LEFT_VALUE->id [ . EXPRESSION ] ,/=

I44:
M->. @ ,/(/digit/id
SELECTION_STATEMENT->if ( . M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->if ( . M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}

I45:
STATEMENT->printf ( . string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( . string ) ; ,/}
STATEMENT->printf ( . string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( . string ,M ID_LIST ) ; ,/}

I46:
STATEMENT->scanf( string . , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->scanf( string . , & id ) ; ,/}

I47:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}
STATEMENT->. ITERATION_EXPRESSION ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ITERATION_EXPRESSION ,/}
STATEMENT->. SELECTION_STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. SELECTION_STATEMENT ,/}
STATEMENT->. ASSIGN_EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ASSIGN_EXPRESSION ; ,/}
STATEMENT->. RETURN EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. RETURN EXPRESSION ; ,/}
STATEMENT->. { STATEMENT_LIST } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. { STATEMENT_LIST } ,/}
STATEMENT->. printf ( string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ) ; ,/}
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/}
STATEMENT->. scanf( string , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. scanf( string , & id ) ; ,/}
STATEMENT_LIST->STATEMENT_LIST . STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->STATEMENT_LIST . STATEMENT ,/}
STATEMENT->{ STATEMENT_LIST . } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->{ STATEMENT_LIST . } ,/}

I48:
ID_LIST->ID_LIST , . id ,/,
ID_LIST->ID_LIST , . id ,/;

I49:
DECLARATION->TYPE_SPECIFIER ID_LIST ; .,/(/digit/for/id/if/printf/scanf(/{
DECLARATION->TYPE_SPECIFIER ID_LIST ; .,/float/int

I50:
ID_LIST->id [ . digit ] ,/,
ID_LIST->id [ . digit ] ,/;
ID_LIST->id [ . digit ] = { DIGIT_LIST } ,/,
ID_LIST->id [ . digit ] = { DIGIT_LIST } ,/;

I51:
ASSIGN_EXPRESSION->LEFT_VALUE = EXPRESSION .,/;

I52:
E->. T ,/)
E->. T ,/+
E->. T ,/-
E->. E + T ,/)
E->. E + T ,/+
E->. E + T ,/-
E->. E - T ,/)
E->. E - T ,/+
E->. E - T ,/-
F->. digit ,/)
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. id ,/)
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. ( E ) ,/)
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. id [ EXPRESSION ] ,/)
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
T->. F ,/)
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. T * F ,/)
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T / F ,/)
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
F->( . E ) ,/)
F->( . E ) ,/*
F->( . E ) ,/+
F->( . E ) ,/-
F->( . E ) ,//

I53:
E->E . + T ,/)
E->E . + T ,/+
E->E . + T ,/-
E->E . - T ,/)
E->E . - T ,/+
E->E . - T ,/-
F->( E . ) ,/*
F->( E . ) ,/+
F->( E . ) ,/-
F->( E . ) ,//
F->( E . ) ,/;

I54:
T->F .,/)
T->F .,/*
T->F .,/+
T->F .,/-
T->F .,//

I55:
E->T .,/)
E->T .,/+
E->T .,/-
T->T . * F ,/)
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . / F ,/)
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//

I56:
F->digit .,/)
F->digit .,/*
F->digit .,/+
F->digit .,/-
F->digit .,//

I57:
F->id .,/)
F->id .,/*
F->id .,/+
F->id .,/-
F->id .,//
F->id . [ EXPRESSION ] ,/)
F->id . [ EXPRESSION ] ,/*
F->id . [ EXPRESSION ] ,/+
F->id . [ EXPRESSION ] ,/-
F->id . [ EXPRESSION ] ,//

I58:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/;
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/;
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/;
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/;
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/;
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/;
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/;
E->E + . T ,/+
E->E + . T ,/-
E->E + . T ,/;

I59:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/;
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/;
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/;
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/;
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/;
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/;
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/;
E->E - . T ,/+
E->E - . T ,/-
E->E - . T ,/;

I60:
STATEMENT->RETURN EXPRESSION ; .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->RETURN EXPRESSION ; .,/}

I61:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/;
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/;
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/;
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/;
T->T * . F ,/*
T->T * . F ,/+
T->T * . F ,/-
T->T * . F ,//
T->T * . F ,/;

I62:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/;
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/;
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/;
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/;
T->T / . F ,/*
T->T / . F ,/+
T->T / . F ,/-
T->T / . F ,//
T->T / . F ,/;

I63:
E->. T ,/+
E->. T ,/-
E->. T ,/]
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/]
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/]
EXPRESSION->. E ,/]
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/]
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/]
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/]
F->id [ . EXPRESSION ] ,/*
F->id [ . EXPRESSION ] ,/+
F->id [ . EXPRESSION ] ,/-
F->id [ . EXPRESSION ] ,//
F->id [ . EXPRESSION ] ,/;

I64:
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION . ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION . ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}

I65:
E->. T ,/)
E->. T ,/+
E->. T ,/-
E->. E + T ,/)
E->. E + T ,/+
E->. E + T ,/-
E->. E - T ,/)
E->. E - T ,/+
E->. E - T ,/-
F->. digit ,/)
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. id ,/)
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. ( E ) ,/)
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. id [ EXPRESSION ] ,/)
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
T->. F ,/)
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. T * F ,/)
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T / F ,/)
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
F->( . E ) ,/*
F->( . E ) ,/+
F->( . E ) ,/-
F->( . E ) ,//
F->( . E ) ,/]

I66:
E->E . + T ,/+
E->E . + T ,/-
E->E . + T ,/]
E->E . - T ,/+
E->E . - T ,/-
E->E . - T ,/]
EXPRESSION->E .,/]

I67:
LEFT_VALUE->id [ EXPRESSION . ] ,/=

I68:
T->F .,/*
T->F .,/+
T->F .,/-
T->F .,//
T->F .,/]

I69:
E->T .,/+
E->T .,/-
E->T .,/]
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . * F ,/]
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
T->T . / F ,/]

I70:
F->digit .,/*
F->digit .,/+
F->digit .,/-
F->digit .,//
F->digit .,/]

I71:
F->id .,/*
F->id .,/+
F->id .,/-
F->id .,//
F->id .,/]
F->id . [ EXPRESSION ] ,/*
F->id . [ EXPRESSION ] ,/+
F->id . [ EXPRESSION ] ,/-
F->id . [ EXPRESSION ] ,//
F->id . [ EXPRESSION ] ,/]

I72:
E->. T ,/+
E->. T ,/-
E->. T ,/</<=/==/>/>=
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/</<=/==/>/>=
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/</<=/==/>/>=
EXPRESSION->. E ,/</<=/==/>/>=
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/</<=/==/>/>=
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/</<=/==/>/>=
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/</<=/==/>/>=
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/</<=/==/>/>=
RELATION_EXPRESSION->. EXPRESSION RELATION_OP EXPRESSION ,/)
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/</<=/==/>/>=
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/</<=/==/>/>=
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/</<=/==/>/>=
SELECTION_STATEMENT->if ( M . RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->if ( M . RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}

I73:
STATEMENT->printf ( string . ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( string . ) ; ,/}
STATEMENT->printf ( string . ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( string . ,M ID_LIST ) ; ,/}

I74:
STATEMENT->scanf( string , . & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->scanf( string , . & id ) ; ,/}

I75:
STATEMENT->{ STATEMENT_LIST } .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->{ STATEMENT_LIST } .,/}

I76:
ID_LIST->ID_LIST , id .,/,
ID_LIST->ID_LIST , id .,/;

I77:
ID_LIST->id [ digit . ] ,/,
ID_LIST->id [ digit . ] ,/;
ID_LIST->id [ digit . ] = { DIGIT_LIST } ,/,
ID_LIST->id [ digit . ] = { DIGIT_LIST } ,/;

I78:
E->E . + T ,/)
E->E . + T ,/+
E->E . + T ,/-
E->E . - T ,/)
E->E . - T ,/+
E->E . - T ,/-
F->( E . ) ,/)
F->( E . ) ,/*
F->( E . ) ,/+
F->( E . ) ,/-
F->( E . ) ,//

I79:
F->( E ) .,/*
F->( E ) .,/+
F->( E ) .,/-
F->( E ) .,//
F->( E ) .,/;

I80:
F->. digit ,/)
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. id ,/)
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. ( E ) ,/)
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. id [ EXPRESSION ] ,/)
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
T->. F ,/)
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. T * F ,/)
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T / F ,/)
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
E->E + . T ,/)
E->E + . T ,/+
E->E + . T ,/-

I81:
F->. digit ,/)
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. id ,/)
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. ( E ) ,/)
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. id [ EXPRESSION ] ,/)
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
T->. F ,/)
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. T * F ,/)
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T / F ,/)
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
E->E - . T ,/)
E->E - . T ,/+
E->E - . T ,/-

I82:
F->. digit ,/)
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. id ,/)
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. ( E ) ,/)
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. id [ EXPRESSION ] ,/)
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
T->T * . F ,/)
T->T * . F ,/*
T->T * . F ,/+
T->T * . F ,/-
T->T * . F ,//

I83:
F->. digit ,/)
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. id ,/)
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. ( E ) ,/)
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. id [ EXPRESSION ] ,/)
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
T->T / . F ,/)
T->T / . F ,/*
T->T / . F ,/+
T->T / . F ,/-
T->T / . F ,//

I84:
E->. T ,/+
E->. T ,/-
E->. T ,/]
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/]
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/]
EXPRESSION->. E ,/]
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/]
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/]
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/]
F->id [ . EXPRESSION ] ,/)
F->id [ . EXPRESSION ] ,/*
F->id [ . EXPRESSION ] ,/+
F->id [ . EXPRESSION ] ,/-
F->id [ . EXPRESSION ] ,//

I85:
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . * F ,/;
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
T->T . / F ,/;
E->E + T .,/+
E->E + T .,/-
E->E + T .,/;

I86:
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . * F ,/;
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
T->T . / F ,/;
E->E - T .,/+
E->E - T .,/-
E->E - T .,/;

I87:
T->T * F .,/*
T->T * F .,/+
T->T * F .,/-
T->T * F .,//
T->T * F .,/;

I88:
T->T / F .,/*
T->T / F .,/+
T->T / F .,/-
T->T / F .,//
T->T / F .,/;

I89:
F->id [ EXPRESSION . ] ,/*
F->id [ EXPRESSION . ] ,/+
F->id [ EXPRESSION . ] ,/-
F->id [ EXPRESSION . ] ,//
F->id [ EXPRESSION . ] ,/;

I90:
M->. @ ,/(/digit/id
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; . M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; . M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}

I91:
E->E . + T ,/)
E->E . + T ,/+
E->E . + T ,/-
E->E . - T ,/)
E->E . - T ,/+
E->E . - T ,/-
F->( E . ) ,/*
F->( E . ) ,/+
F->( E . ) ,/-
F->( E . ) ,//
F->( E . ) ,/]

I92:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/]
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/]
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/]
E->E + . T ,/+
E->E + . T ,/-
E->E + . T ,/]

I93:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/]
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/]
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/]
E->E - . T ,/+
E->E - . T ,/-
E->E - . T ,/]

I94:
LEFT_VALUE->id [ EXPRESSION ] .,/=

I95:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->T * . F ,/*
T->T * . F ,/+
T->T * . F ,/-
T->T * . F ,//
T->T * . F ,/]

I96:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->T / . F ,/*
T->T / . F ,/+
T->T / . F ,/-
T->T / . F ,//
T->T / . F ,/]

I97:
E->. T ,/+
E->. T ,/-
E->. T ,/]
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/]
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/]
EXPRESSION->. E ,/]
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/]
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/]
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/]
F->id [ . EXPRESSION ] ,/*
F->id [ . EXPRESSION ] ,/+
F->id [ . EXPRESSION ] ,/-
F->id [ . EXPRESSION ] ,//
F->id [ . EXPRESSION ] ,/]

I98:
E->. T ,/)
E->. T ,/+
E->. T ,/-
E->. E + T ,/)
E->. E + T ,/+
E->. E + T ,/-
E->. E - T ,/)
E->. E - T ,/+
E->. E - T ,/-
F->. digit ,/)
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. id ,/)
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. ( E ) ,/)
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. id [ EXPRESSION ] ,/)
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
T->. F ,/)
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. T * F ,/)
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T / F ,/)
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
F->( . E ) ,/*
F->( . E ) ,/+
F->( . E ) ,/-
F->( . E ) ,//
F->( . E ) ,/</<=/==/>/>=

I99:
E->E . + T ,/+
E->E . + T ,/-
E->E . + T ,/</<=/==/>/>=
E->E . - T ,/+
E->E . - T ,/-
E->E . - T ,/</<=/==/>/>=
EXPRESSION->E .,/</<=/==/>/>=

I100:
RELATION_OP->. < ,/(/digit/id
RELATION_OP->. <= ,/(/digit/id
RELATION_OP->. == ,/(/digit/id
RELATION_OP->. > ,/(/digit/id
RELATION_OP->. >= ,/(/digit/id
RELATION_EXPRESSION->EXPRESSION . RELATION_OP EXPRESSION ,/)

I101:
T->F .,/*
T->F .,/+
T->F .,/-
T->F .,//
T->F .,/</<=/==/>/>=

I102:
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION . ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION . ) STATEMENT M else STATEMENT ,/}

I103:
E->T .,/+
E->T .,/-
E->T .,/</<=/==/>/>=
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . * F ,/</<=/==/>/>=
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
T->T . / F ,/</<=/==/>/>=

I104:
F->digit .,/*
F->digit .,/+
F->digit .,/-
F->digit .,//
F->digit .,/</<=/==/>/>=

I105:
F->id .,/*
F->id .,/+
F->id .,/-
F->id .,//
F->id .,/</<=/==/>/>=
F->id . [ EXPRESSION ] ,/*
F->id . [ EXPRESSION ] ,/+
F->id . [ EXPRESSION ] ,/-
F->id . [ EXPRESSION ] ,//
F->id . [ EXPRESSION ] ,/</<=/==/>/>=

I106:
STATEMENT->printf ( string ) . ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( string ) . ; ,/}

I107:
ID_LIST->. id ,/)
ID_LIST->. id ,/,
ID_LIST->. ID_LIST , id ,/)
ID_LIST->. ID_LIST , id ,/,
ID_LIST->. id [ digit ] ,/)
ID_LIST->. id [ digit ] ,/,
ID_LIST->. id [ digit ] = { DIGIT_LIST } ,/)
ID_LIST->. id [ digit ] = { DIGIT_LIST } ,/,
STATEMENT->printf ( string ,M . ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( string ,M . ID_LIST ) ; ,/}

I108:
STATEMENT->scanf( string , & . id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->scanf( string , & . id ) ; ,/}

I109:
ID_LIST->id [ digit ] .,/,
ID_LIST->id [ digit ] .,/;
ID_LIST->id [ digit ] . = { DIGIT_LIST } ,/,
ID_LIST->id [ digit ] . = { DIGIT_LIST } ,/;

I110:
F->( E ) .,/)
F->( E ) .,/*
F->( E ) .,/+
F->( E ) .,/-
F->( E ) .,//

I111:
T->T . * F ,/)
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . / F ,/)
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
E->E + T .,/)
E->E + T .,/+
E->E + T .,/-

I112:
T->T . * F ,/)
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . / F ,/)
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
E->E - T .,/)
E->E - T .,/+
E->E - T .,/-

I113:
T->T * F .,/)
T->T * F .,/*
T->T * F .,/+
T->T * F .,/-
T->T * F .,//

I114:
T->T / F .,/)
T->T / F .,/*
T->T / F .,/+
T->T / F .,/-
T->T / F .,//

I115:
F->id [ EXPRESSION . ] ,/)
F->id [ EXPRESSION . ] ,/*
F->id [ EXPRESSION . ] ,/+
F->id [ EXPRESSION . ] ,/-
F->id [ EXPRESSION . ] ,//

I116:
F->id [ EXPRESSION ] .,/*
F->id [ EXPRESSION ] .,/+
F->id [ EXPRESSION ] .,/-
F->id [ EXPRESSION ] .,//
F->id [ EXPRESSION ] .,/;

I117:
E->. T ,/+
E->. T ,/-
E->. T ,/</<=/==/>/>=
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/</<=/==/>/>=
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/</<=/==/>/>=
EXPRESSION->. E ,/</<=/==/>/>=
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/</<=/==/>/>=
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/</<=/==/>/>=
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/</<=/==/>/>=
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/</<=/==/>/>=
RELATION_EXPRESSION->. EXPRESSION RELATION_OP EXPRESSION ,/;
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/</<=/==/>/>=
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/</<=/==/>/>=
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/</<=/==/>/>=
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M . RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M . RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}

I118:
F->( E ) .,/*
F->( E ) .,/+
F->( E ) .,/-
F->( E ) .,//
F->( E ) .,/]

I119:
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . * F ,/]
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
T->T . / F ,/]
E->E + T .,/+
E->E + T .,/-
E->E + T .,/]

I120:
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . * F ,/]
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
T->T . / F ,/]
E->E - T .,/+
E->E - T .,/-
E->E - T .,/]

I121:
T->T * F .,/*
T->T * F .,/+
T->T * F .,/-
T->T * F .,//
T->T * F .,/]

I122:
T->T / F .,/*
T->T / F .,/+
T->T / F .,/-
T->T / F .,//
T->T / F .,/]

I123:
F->id [ EXPRESSION . ] ,/*
F->id [ EXPRESSION . ] ,/+
F->id [ EXPRESSION . ] ,/-
F->id [ EXPRESSION . ] ,//
F->id [ EXPRESSION . ] ,/]

I124:
E->E . + T ,/)
E->E . + T ,/+
E->E . + T ,/-
E->E . - T ,/)
E->E . - T ,/+
E->E . - T ,/-
F->( E . ) ,/*
F->( E . ) ,/+
F->( E . ) ,/-
F->( E . ) ,//
F->( E . ) ,/</<=/==/>/>=

I125:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/</<=/==/>/>=
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/</<=/==/>/>=
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/</<=/==/>/>=
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/</<=/==/>/>=
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/</<=/==/>/>=
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/</<=/==/>/>=
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/</<=/==/>/>=
E->E + . T ,/+
E->E + . T ,/-
E->E + . T ,/</<=/==/>/>=

I126:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/</<=/==/>/>=
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/</<=/==/>/>=
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/</<=/==/>/>=
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/</<=/==/>/>=
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/</<=/==/>/>=
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/</<=/==/>/>=
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/</<=/==/>/>=
E->E - . T ,/+
E->E - . T ,/-
E->E - . T ,/</<=/==/>/>=

I127:
RELATION_OP->< .,/(/digit/id

I128:
RELATION_OP-><= .,/(/digit/id

I129:
RELATION_OP->== .,/(/digit/id

I130:
RELATION_OP->> .,/(/digit/id

I131:
RELATION_OP->>= .,/(/digit/id

I132:
E->. T ,/)
E->. T ,/+
E->. T ,/-
E->. E + T ,/)
E->. E + T ,/+
E->. E + T ,/-
E->. E - T ,/)
E->. E - T ,/+
E->. E - T ,/-
EXPRESSION->. E ,/)
F->. digit ,/)
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. id ,/)
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. ( E ) ,/)
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. id [ EXPRESSION ] ,/)
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
T->. F ,/)
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. T * F ,/)
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T / F ,/)
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
RELATION_EXPRESSION->EXPRESSION RELATION_OP . EXPRESSION ,/)

I133:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/else
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/else
STATEMENT->. ITERATION_EXPRESSION ,/else
STATEMENT->. SELECTION_STATEMENT ,/else
STATEMENT->. ASSIGN_EXPRESSION ; ,/else
STATEMENT->. RETURN EXPRESSION ; ,/else
STATEMENT->. { STATEMENT_LIST } ,/else
STATEMENT->. printf ( string ) ; ,/else
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/else
STATEMENT->. scanf( string , & id ) ; ,/else
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) . STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) . STATEMENT M else STATEMENT ,/}

I134:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/</<=/==/>/>=
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/</<=/==/>/>=
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/</<=/==/>/>=
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/</<=/==/>/>=
T->T * . F ,/*
T->T * . F ,/+
T->T * . F ,/-
T->T * . F ,//
T->T * . F ,/</<=/==/>/>=

I135:
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/</<=/==/>/>=
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/</<=/==/>/>=
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/</<=/==/>/>=
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/</<=/==/>/>=
T->T / . F ,/*
T->T / . F ,/+
T->T / . F ,/-
T->T / . F ,//
T->T / . F ,/</<=/==/>/>=

I136:
E->. T ,/+
E->. T ,/-
E->. T ,/]
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/]
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/]
EXPRESSION->. E ,/]
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/]
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/]
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/]
F->id [ . EXPRESSION ] ,/*
F->id [ . EXPRESSION ] ,/+
F->id [ . EXPRESSION ] ,/-
F->id [ . EXPRESSION ] ,//
F->id [ . EXPRESSION ] ,/</<=/==/>/>=

I137:
STATEMENT->printf ( string ) ; .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( string ) ; .,/}

I138:
ID_LIST->ID_LIST . , id ,/)
ID_LIST->ID_LIST . , id ,/,
STATEMENT->printf ( string ,M ID_LIST . ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( string ,M ID_LIST . ) ; ,/}

I139:
ID_LIST->id .,/)
ID_LIST->id .,/,
ID_LIST->id . [ digit ] ,/)
ID_LIST->id . [ digit ] ,/,
ID_LIST->id . [ digit ] = { DIGIT_LIST } ,/)
ID_LIST->id . [ digit ] = { DIGIT_LIST } ,/,

I140:
STATEMENT->scanf( string , & id . ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->scanf( string , & id . ) ; ,/}

I141:
ID_LIST->id [ digit ] = . { DIGIT_LIST } ,/,
ID_LIST->id [ digit ] = . { DIGIT_LIST } ,/;

I142:
F->id [ EXPRESSION ] .,/)
F->id [ EXPRESSION ] .,/*
F->id [ EXPRESSION ] .,/+
F->id [ EXPRESSION ] .,/-
F->id [ EXPRESSION ] .,//

I143:
RELATION_OP->. < ,/(/digit/id
RELATION_OP->. <= ,/(/digit/id
RELATION_OP->. == ,/(/digit/id
RELATION_OP->. > ,/(/digit/id
RELATION_OP->. >= ,/(/digit/id
RELATION_EXPRESSION->EXPRESSION . RELATION_OP EXPRESSION ,/;

I144:
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION . ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION . ; M INC_EXPRESSION ) STATEMENT ,/}

I145:
F->id [ EXPRESSION ] .,/*
F->id [ EXPRESSION ] .,/+
F->id [ EXPRESSION ] .,/-
F->id [ EXPRESSION ] .,//
F->id [ EXPRESSION ] .,/]

I146:
F->( E ) .,/*
F->( E ) .,/+
F->( E ) .,/-
F->( E ) .,//
F->( E ) .,/</<=/==/>/>=

I147:
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . * F ,/</<=/==/>/>=
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
T->T . / F ,/</<=/==/>/>=
E->E + T .,/+
E->E + T .,/-
E->E + T .,/</<=/==/>/>=

I148:
T->T . * F ,/*
T->T . * F ,/+
T->T . * F ,/-
T->T . * F ,//
T->T . * F ,/</<=/==/>/>=
T->T . / F ,/*
T->T . / F ,/+
T->T . / F ,/-
T->T . / F ,//
T->T . / F ,/</<=/==/>/>=
E->E - T .,/+
E->E - T .,/-
E->E - T .,/</<=/==/>/>=

I149:
E->E . + T ,/)
E->E . + T ,/+
E->E . + T ,/-
E->E . - T ,/)
E->E . - T ,/+
E->E . - T ,/-
EXPRESSION->E .,/)

I150:
RELATION_EXPRESSION->EXPRESSION RELATION_OP EXPRESSION .,/)

I151:
STATEMENT->ASSIGN_EXPRESSION . ; ,/else

I152:
STATEMENT->ITERATION_EXPRESSION .,/else

I153:
E->. T ,/+
E->. T ,/-
E->. T ,/;
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/;
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/;
EXPRESSION->. E ,/;
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/;
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/;
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/;
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/;
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/;
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/;
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/;
STATEMENT->RETURN . EXPRESSION ; ,/else

I154:
STATEMENT->SELECTION_STATEMENT .,/else

I155:
M->. @ ,/else
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT . M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT . M else STATEMENT ,/}

I156:
ITERATION_EXPRESSION->for . ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/else

I157:
SELECTION_STATEMENT->if . ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/else

I158:
STATEMENT->printf . ( string ) ; ,/else
STATEMENT->printf . ( string ,M ID_LIST ) ; ,/else

I159:
STATEMENT->scanf( . string , & id ) ; ,/else

I160:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}
STATEMENT->. ITERATION_EXPRESSION ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ITERATION_EXPRESSION ,/}
STATEMENT->. SELECTION_STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. SELECTION_STATEMENT ,/}
STATEMENT->. ASSIGN_EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ASSIGN_EXPRESSION ; ,/}
STATEMENT->. RETURN EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. RETURN EXPRESSION ; ,/}
STATEMENT->. { STATEMENT_LIST } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. { STATEMENT_LIST } ,/}
STATEMENT->. printf ( string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ) ; ,/}
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/}
STATEMENT->. scanf( string , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. scanf( string , & id ) ; ,/}
STATEMENT_LIST->. STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->. STATEMENT ,/}
STATEMENT_LIST->. STATEMENT_LIST STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->. STATEMENT_LIST STATEMENT ,/}
STATEMENT->{ . STATEMENT_LIST } ,/else

I161:
T->T * F .,/*
T->T * F .,/+
T->T * F .,/-
T->T * F .,//
T->T * F .,/</<=/==/>/>=

I162:
T->T / F .,/*
T->T / F .,/+
T->T / F .,/-
T->T / F .,//
T->T / F .,/</<=/==/>/>=

I163:
F->id [ EXPRESSION . ] ,/*
F->id [ EXPRESSION . ] ,/+
F->id [ EXPRESSION . ] ,/-
F->id [ EXPRESSION . ] ,//
F->id [ EXPRESSION . ] ,/</<=/==/>/>=

I164:
STATEMENT->printf ( string ,M ID_LIST ) . ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( string ,M ID_LIST ) . ; ,/}

I165:
ID_LIST->ID_LIST , . id ,/)
ID_LIST->ID_LIST , . id ,/,

I166:
ID_LIST->id [ . digit ] ,/)
ID_LIST->id [ . digit ] ,/,
ID_LIST->id [ . digit ] = { DIGIT_LIST } ,/)
ID_LIST->id [ . digit ] = { DIGIT_LIST } ,/,

I167:
STATEMENT->scanf( string , & id ) . ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->scanf( string , & id ) . ; ,/}

I168:
DIGIT_LIST->. digit ,/,
DIGIT_LIST->. digit ,/}
DIGIT_LIST->. DIGIT_LIST , digit ,/,
DIGIT_LIST->. DIGIT_LIST , digit ,/}
ID_LIST->id [ digit ] = { . DIGIT_LIST } ,/,
ID_LIST->id [ digit ] = { . DIGIT_LIST } ,/;

I169:
E->. T ,/+
E->. T ,/-
E->. T ,/;
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/;
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/;
EXPRESSION->. E ,/;
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/;
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/;
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/;
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/;
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/;
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/;
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/;
RELATION_EXPRESSION->EXPRESSION RELATION_OP . EXPRESSION ,/;

I170:
M->. @ ,/id
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; . M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; . M INC_EXPRESSION ) STATEMENT ,/}

I171:
STATEMENT->ASSIGN_EXPRESSION ; .,/else

I172:
STATEMENT->RETURN EXPRESSION . ; ,/else

I173:
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT M . else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT M . else STATEMENT ,/}

I174:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
ITERATION_EXPRESSION->for ( . ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/else

I175:
M->. @ ,/(/digit/id
SELECTION_STATEMENT->if ( . M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/else

I176:
STATEMENT->printf ( . string ) ; ,/else
STATEMENT->printf ( . string ,M ID_LIST ) ; ,/else

I177:
STATEMENT->scanf( string . , & id ) ; ,/else

I178:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}
STATEMENT->. ITERATION_EXPRESSION ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ITERATION_EXPRESSION ,/}
STATEMENT->. SELECTION_STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. SELECTION_STATEMENT ,/}
STATEMENT->. ASSIGN_EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ASSIGN_EXPRESSION ; ,/}
STATEMENT->. RETURN EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. RETURN EXPRESSION ; ,/}
STATEMENT->. { STATEMENT_LIST } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. { STATEMENT_LIST } ,/}
STATEMENT->. printf ( string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ) ; ,/}
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/}
STATEMENT->. scanf( string , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. scanf( string , & id ) ; ,/}
STATEMENT_LIST->STATEMENT_LIST . STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT_LIST->STATEMENT_LIST . STATEMENT ,/}
STATEMENT->{ STATEMENT_LIST . } ,/else

I179:
F->id [ EXPRESSION ] .,/*
F->id [ EXPRESSION ] .,/+
F->id [ EXPRESSION ] .,/-
F->id [ EXPRESSION ] .,//
F->id [ EXPRESSION ] .,/</<=/==/>/>=

I180:
STATEMENT->printf ( string ,M ID_LIST ) ; .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->printf ( string ,M ID_LIST ) ; .,/}

I181:
ID_LIST->ID_LIST , id .,/)
ID_LIST->ID_LIST , id .,/,

I182:
ID_LIST->id [ digit . ] ,/)
ID_LIST->id [ digit . ] ,/,
ID_LIST->id [ digit . ] = { DIGIT_LIST } ,/)
ID_LIST->id [ digit . ] = { DIGIT_LIST } ,/,

I183:
STATEMENT->scanf( string , & id ) ; .,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->scanf( string , & id ) ; .,/}

I184:
DIGIT_LIST->DIGIT_LIST . , digit ,/,
DIGIT_LIST->DIGIT_LIST . , digit ,/}
ID_LIST->id [ digit ] = { DIGIT_LIST . } ,/,
ID_LIST->id [ digit ] = { DIGIT_LIST . } ,/;

I185:
DIGIT_LIST->digit .,/,
DIGIT_LIST->digit .,/}

I186:
RELATION_EXPRESSION->EXPRESSION RELATION_OP EXPRESSION .,/;

I187:
INC_EXPRESSION->. LEFT_VALUE ++ ,/)
LEFT_VALUE->. id ,/++
LEFT_VALUE->. id [ EXPRESSION ] ,/++
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M . INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M . INC_EXPRESSION ) STATEMENT ,/}

I188:
STATEMENT->RETURN EXPRESSION ; .,/else

I189:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}
STATEMENT->. ITERATION_EXPRESSION ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ITERATION_EXPRESSION ,/}
STATEMENT->. SELECTION_STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. SELECTION_STATEMENT ,/}
STATEMENT->. ASSIGN_EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ASSIGN_EXPRESSION ; ,/}
STATEMENT->. RETURN EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. RETURN EXPRESSION ; ,/}
STATEMENT->. { STATEMENT_LIST } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. { STATEMENT_LIST } ,/}
STATEMENT->. printf ( string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ) ; ,/}
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/}
STATEMENT->. scanf( string , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. scanf( string , & id ) ; ,/}
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT M else . STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT M else . STATEMENT ,/}

I190:
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION . ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/else

I191:
E->. T ,/+
E->. T ,/-
E->. T ,/</<=/==/>/>=
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/</<=/==/>/>=
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/</<=/==/>/>=
EXPRESSION->. E ,/</<=/==/>/>=
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/</<=/==/>/>=
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/</<=/==/>/>=
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/</<=/==/>/>=
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/</<=/==/>/>=
RELATION_EXPRESSION->. EXPRESSION RELATION_OP EXPRESSION ,/)
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/</<=/==/>/>=
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/</<=/==/>/>=
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/</<=/==/>/>=
SELECTION_STATEMENT->if ( M . RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/else

I192:
STATEMENT->printf ( string . ) ; ,/else
STATEMENT->printf ( string . ,M ID_LIST ) ; ,/else

I193:
STATEMENT->scanf( string , . & id ) ; ,/else

I194:
STATEMENT->{ STATEMENT_LIST } .,/else

I195:
ID_LIST->id [ digit ] .,/)
ID_LIST->id [ digit ] .,/,
ID_LIST->id [ digit ] . = { DIGIT_LIST } ,/)
ID_LIST->id [ digit ] . = { DIGIT_LIST } ,/,

I196:
DIGIT_LIST->DIGIT_LIST , . digit ,/,
DIGIT_LIST->DIGIT_LIST , . digit ,/}

I197:
ID_LIST->id [ digit ] = { DIGIT_LIST } .,/,
ID_LIST->id [ digit ] = { DIGIT_LIST } .,/;

I198:
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION . ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION . ) STATEMENT ,/}

I199:
INC_EXPRESSION->LEFT_VALUE . ++ ,/)

I200:
LEFT_VALUE->id .,/++
LEFT_VALUE->id . [ EXPRESSION ] ,/++

I201:
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT .,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT .,/}

I202:
M->. @ ,/(/digit/id
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; . M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/else

I203:
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION . ) STATEMENT M else STATEMENT ,/else

I204:
STATEMENT->printf ( string ) . ; ,/else

I205:
ID_LIST->. id ,/)
ID_LIST->. id ,/,
ID_LIST->. ID_LIST , id ,/)
ID_LIST->. ID_LIST , id ,/,
ID_LIST->. id [ digit ] ,/)
ID_LIST->. id [ digit ] ,/,
ID_LIST->. id [ digit ] = { DIGIT_LIST } ,/)
ID_LIST->. id [ digit ] = { DIGIT_LIST } ,/,
STATEMENT->printf ( string ,M . ID_LIST ) ; ,/else

I206:
STATEMENT->scanf( string , & . id ) ; ,/else

I207:
ID_LIST->id [ digit ] = . { DIGIT_LIST } ,/)
ID_LIST->id [ digit ] = . { DIGIT_LIST } ,/,

I208:
DIGIT_LIST->DIGIT_LIST , digit .,/,
DIGIT_LIST->DIGIT_LIST , digit .,/}

I209:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/}
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/}
STATEMENT->. ITERATION_EXPRESSION ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ITERATION_EXPRESSION ,/}
STATEMENT->. SELECTION_STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. SELECTION_STATEMENT ,/}
STATEMENT->. ASSIGN_EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. ASSIGN_EXPRESSION ; ,/}
STATEMENT->. RETURN EXPRESSION ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. RETURN EXPRESSION ; ,/}
STATEMENT->. { STATEMENT_LIST } ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. { STATEMENT_LIST } ,/}
STATEMENT->. printf ( string ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ) ; ,/}
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/}
STATEMENT->. scanf( string , & id ) ; ,/(/digit/for/id/if/printf/scanf(/{
STATEMENT->. scanf( string , & id ) ; ,/}
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) . STATEMENT ,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) . STATEMENT ,/}

I210:
INC_EXPRESSION->LEFT_VALUE ++ .,/)

I211:
E->. T ,/+
E->. T ,/-
E->. T ,/]
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/]
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/]
EXPRESSION->. E ,/]
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/]
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/]
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/]
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/]
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/]
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/]
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/]
LEFT_VALUE->id [ . EXPRESSION ] ,/++

I212:
E->. T ,/+
E->. T ,/-
E->. T ,/</<=/==/>/>=
E->. E + T ,/+
E->. E + T ,/-
E->. E + T ,/</<=/==/>/>=
E->. E - T ,/+
E->. E - T ,/-
E->. E - T ,/</<=/==/>/>=
EXPRESSION->. E ,/</<=/==/>/>=
F->. digit ,/*
F->. digit ,/+
F->. digit ,/-
F->. digit ,//
F->. digit ,/</<=/==/>/>=
F->. id ,/*
F->. id ,/+
F->. id ,/-
F->. id ,//
F->. id ,/</<=/==/>/>=
F->. ( E ) ,/*
F->. ( E ) ,/+
F->. ( E ) ,/-
F->. ( E ) ,//
F->. ( E ) ,/</<=/==/>/>=
F->. id [ EXPRESSION ] ,/*
F->. id [ EXPRESSION ] ,/+
F->. id [ EXPRESSION ] ,/-
F->. id [ EXPRESSION ] ,//
F->. id [ EXPRESSION ] ,/</<=/==/>/>=
RELATION_EXPRESSION->. EXPRESSION RELATION_OP EXPRESSION ,/;
T->. F ,/*
T->. F ,/+
T->. F ,/-
T->. F ,//
T->. F ,/</<=/==/>/>=
T->. T * F ,/*
T->. T * F ,/+
T->. T * F ,/-
T->. T * F ,//
T->. T * F ,/</<=/==/>/>=
T->. T / F ,/*
T->. T / F ,/+
T->. T / F ,/-
T->. T / F ,//
T->. T / F ,/</<=/==/>/>=
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M . RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/else

I213:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/else
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/else
STATEMENT->. ITERATION_EXPRESSION ,/else
STATEMENT->. SELECTION_STATEMENT ,/else
STATEMENT->. ASSIGN_EXPRESSION ; ,/else
STATEMENT->. RETURN EXPRESSION ; ,/else
STATEMENT->. { STATEMENT_LIST } ,/else
STATEMENT->. printf ( string ) ; ,/else
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/else
STATEMENT->. scanf( string , & id ) ; ,/else
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) . STATEMENT M else STATEMENT ,/else

I214:
STATEMENT->printf ( string ) ; .,/else

I215:
ID_LIST->ID_LIST . , id ,/)
ID_LIST->ID_LIST . , id ,/,
STATEMENT->printf ( string ,M ID_LIST . ) ; ,/else

I216:
STATEMENT->scanf( string , & id . ) ; ,/else

I217:
DIGIT_LIST->. digit ,/,
DIGIT_LIST->. digit ,/}
DIGIT_LIST->. DIGIT_LIST , digit ,/,
DIGIT_LIST->. DIGIT_LIST , digit ,/}
ID_LIST->id [ digit ] = { . DIGIT_LIST } ,/)
ID_LIST->id [ digit ] = { . DIGIT_LIST } ,/,

I218:
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT .,/(/digit/for/id/if/printf/scanf(/{
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT .,/}

I219:
LEFT_VALUE->id [ EXPRESSION . ] ,/++

I220:
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION . ; M INC_EXPRESSION ) STATEMENT ,/else

I221:
M->. @ ,/else
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT . M else STATEMENT ,/else

I222:
STATEMENT->printf ( string ,M ID_LIST ) . ; ,/else

I223:
STATEMENT->scanf( string , & id ) . ; ,/else

I224:
DIGIT_LIST->DIGIT_LIST . , digit ,/,
DIGIT_LIST->DIGIT_LIST . , digit ,/}
ID_LIST->id [ digit ] = { DIGIT_LIST . } ,/)
ID_LIST->id [ digit ] = { DIGIT_LIST . } ,/,

I225:
LEFT_VALUE->id [ EXPRESSION ] .,/++

I226:
M->. @ ,/id
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; . M INC_EXPRESSION ) STATEMENT ,/else

I227:
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT M . else STATEMENT ,/else

I228:
STATEMENT->printf ( string ,M ID_LIST ) ; .,/else

I229:
STATEMENT->scanf( string , & id ) ; .,/else

I230:
ID_LIST->id [ digit ] = { DIGIT_LIST } .,/)
ID_LIST->id [ digit ] = { DIGIT_LIST } .,/,

I231:
INC_EXPRESSION->. LEFT_VALUE ++ ,/)
LEFT_VALUE->. id ,/++
LEFT_VALUE->. id [ EXPRESSION ] ,/++
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M . INC_EXPRESSION ) STATEMENT ,/else

I232:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/else
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/else
STATEMENT->. ITERATION_EXPRESSION ,/else
STATEMENT->. SELECTION_STATEMENT ,/else
STATEMENT->. ASSIGN_EXPRESSION ; ,/else
STATEMENT->. RETURN EXPRESSION ; ,/else
STATEMENT->. { STATEMENT_LIST } ,/else
STATEMENT->. printf ( string ) ; ,/else
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/else
STATEMENT->. scanf( string , & id ) ; ,/else
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT M else . STATEMENT ,/else

I233:
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION . ) STATEMENT ,/else

I234:
SELECTION_STATEMENT->if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT .,/else

I235:
ASSIGN_EXPRESSION->. LEFT_VALUE = EXPRESSION ,/;
ITERATION_EXPRESSION->. for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT ,/else
LEFT_VALUE->. id ,/=
LEFT_VALUE->. id [ EXPRESSION ] ,/=
SELECTION_STATEMENT->. if ( M RELATION_EXPRESSION ) STATEMENT M else STATEMENT ,/else
STATEMENT->. ITERATION_EXPRESSION ,/else
STATEMENT->. SELECTION_STATEMENT ,/else
STATEMENT->. ASSIGN_EXPRESSION ; ,/else
STATEMENT->. RETURN EXPRESSION ; ,/else
STATEMENT->. { STATEMENT_LIST } ,/else
STATEMENT->. printf ( string ) ; ,/else
STATEMENT->. printf ( string ,M ID_LIST ) ; ,/else
STATEMENT->. scanf( string , & id ) ; ,/else
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) . STATEMENT ,/else

I236:
ITERATION_EXPRESSION->for ( ASSIGN_EXPRESSION ; M RELATION_EXPRESSION ; M INC_EXPRESSION ) STATEMENT .,/else

